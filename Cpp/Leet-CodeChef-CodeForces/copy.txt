#include <iostream>
#include<vector>
#include <algorithm>
#include <map>

using namespace std;

int gcd(int n1, int n2){
    int hcf;
 // swapping variables n1 and n2 if n2 is greater than n1.
  if ( n2 > n1) {   
    int temp = n2;
    n2 = n1;
    n1 = temp;
  }
    
  for (int i = 1; i <=  n2; ++i) {
    if (n1 % i == 0 && n2 % i ==0) {
      hcf = i;
    }
  }
  return hcf;
}

int lcm(int n1, int n2){
    // maximum value between n1 and n2 is stored in max
    int max = (n1 > n2) ? n1 : n2;
    int lcm;
    do
    {
        if (max % n1 == 0 && max % n2 == 0)
        {
            lcm = max;
            break;
        }
        else
            ++max;
    } while (true);
    return lcm;
}

void orderedPairs(int N){
    // map<pair<int, int>, vector<int>> m;
    int minA = minB = 100;
    vector<int> v;
    int a, b, gx, sum=0;
    for (int i = 1; i < N; i++) {
        a = i;
        for (int j = 1; j < N; j++) {
            b = j;
            sum = a+b;
            if(sum == N){
                minA = min(minA, a);
                minB = min(minB, b);
                gx = gcd(a, b) + lcm(a, b);
                m.push_back(gx);
            }
        }
    }
    
    sort(v.begin(), v.end());
    cout << v[0] << endl;
    cout << v[1] << endl;
}


int main() {
	// your code goes here
	int N;
	cin >> N;
	orderedPairs(N);
	return 0;
}
